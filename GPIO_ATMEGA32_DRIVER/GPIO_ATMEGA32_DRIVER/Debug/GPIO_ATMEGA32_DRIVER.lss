
GPIO_ATMEGA32_DRIVER.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000da  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000012e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000012e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000160  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000058  00000000  00000000  0000019c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000087d  00000000  00000000  000001f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000678  00000000  00000000  00000a71  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000331  00000000  00000000  000010e9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000090  00000000  00000000  0000141c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000452  00000000  00000000  000014ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000017d  00000000  00000000  000018fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00001a7b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:


int main(void)
{
    /* Replace with your application code */
	GPIO_OutputConfig(PORTA_DIRREG_ADDRESS,PORTA_OUTPUTBLOCK_ADDRESS,OUT_PASS,0);
  6c:	20 e0       	ldi	r18, 0x00	; 0
  6e:	40 e0       	ldi	r20, 0x00	; 0
  70:	69 e3       	ldi	r22, 0x39	; 57
  72:	70 e0       	ldi	r23, 0x00	; 0
  74:	8a e3       	ldi	r24, 0x3A	; 58
  76:	90 e0       	ldi	r25, 0x00	; 0
  78:	0e 94 4c 00 	call	0x98	; 0x98 <GPIO_OutputConfig>
    while (1) 
    {
		TOGGLE_BIT(PORTA_OUTPUTREG,0);
  7c:	91 e0       	ldi	r25, 0x01	; 1
  7e:	8b b3       	in	r24, 0x1b	; 27
  80:	89 27       	eor	r24, r25
  82:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  84:	2f e9       	ldi	r18, 0x9F	; 159
  86:	36 e8       	ldi	r19, 0x86	; 134
  88:	81 e0       	ldi	r24, 0x01	; 1
  8a:	21 50       	subi	r18, 0x01	; 1
  8c:	30 40       	sbci	r19, 0x00	; 0
  8e:	80 40       	sbci	r24, 0x00	; 0
  90:	e1 f7       	brne	.-8      	; 0x8a <main+0x1e>
  92:	00 c0       	rjmp	.+0      	; 0x94 <main+0x28>
  94:	00 00       	nop
  96:	f3 cf       	rjmp	.-26     	; 0x7e <main+0x12>

00000098 <GPIO_OutputConfig>:
void GPIO_InputConfig(volatile uint8* DIRREG_address,volatile uint8* inputMode_address,Input_Mode Mode,uint8 pin_number){
	CLEAR_BIT(*DIRREG_address,pin_number);
	CLEAR_BIT(*inputMode_address,pin_number);
	*inputMode_address|=(Mode<<pin_number);
}
void GPIO_OutputConfig(volatile uint8* DIRREG_address,volatile uint8* outputMode_address,Output_Mode Mode,uint8 pin_number){
  98:	cf 93       	push	r28
  9a:	df 93       	push	r29
  9c:	ec 01       	movw	r28, r24
  9e:	db 01       	movw	r26, r22
	SET_BIT(*DIRREG_address,pin_number);
  a0:	98 81       	ld	r25, Y
  a2:	e1 e0       	ldi	r30, 0x01	; 1
  a4:	f0 e0       	ldi	r31, 0x00	; 0
  a6:	02 2e       	mov	r0, r18
  a8:	02 c0       	rjmp	.+4      	; 0xae <GPIO_OutputConfig+0x16>
  aa:	ee 0f       	add	r30, r30
  ac:	ff 1f       	adc	r31, r31
  ae:	0a 94       	dec	r0
  b0:	e2 f7       	brpl	.-8      	; 0xaa <GPIO_OutputConfig+0x12>
  b2:	9e 2b       	or	r25, r30
  b4:	98 83       	st	Y, r25
	CLEAR_BIT(*outputMode_address,pin_number);
  b6:	8c 91       	ld	r24, X
  b8:	e0 95       	com	r30
  ba:	e8 23       	and	r30, r24
  bc:	ec 93       	st	X, r30
	*outputMode_address|=(Mode<<pin_number);
  be:	8c 91       	ld	r24, X
  c0:	50 e0       	ldi	r21, 0x00	; 0
  c2:	02 c0       	rjmp	.+4      	; 0xc8 <GPIO_OutputConfig+0x30>
  c4:	44 0f       	add	r20, r20
  c6:	55 1f       	adc	r21, r21
  c8:	2a 95       	dec	r18
  ca:	e2 f7       	brpl	.-8      	; 0xc4 <GPIO_OutputConfig+0x2c>
  cc:	48 2b       	or	r20, r24
  ce:	4c 93       	st	X, r20
}
  d0:	df 91       	pop	r29
  d2:	cf 91       	pop	r28
  d4:	08 95       	ret

000000d6 <_exit>:
  d6:	f8 94       	cli

000000d8 <__stop_program>:
  d8:	ff cf       	rjmp	.-2      	; 0xd8 <__stop_program>
